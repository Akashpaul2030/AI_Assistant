from sqlalchemy.orm import Session
from app.database.models import ConversationLog
from typing import Dict, List, Optional, Any
import json

def log_conversation(
    db: Session,
    user_id: str,
    session_id: str,
    user_message: str,
    detected_intent: str,
    entities: Optional[Dict[str, Any]],
    bot_response: str,
    suggested_actions: Optional[List[str]] = None
) -> ConversationLog:
    """
    Log a conversation interaction between the user and the chatbot.
    
    Args:
        db: Database session
        user_id: Unique identifier for the user
        session_id: Unique identifier for the conversation session
        user_message: The message sent by the user
        detected_intent: The intent detected from the user message
        entities: Any entities extracted from the user message
        bot_response: The response generated by the chatbot
        suggested_actions: List of suggested actions for the user
        
    Returns:
        The created ConversationLog object
    """
    # Convert entities and suggested_actions to JSON strings if they're not None
    entities_json = entities if entities is not None else {}
    suggested_actions_json = suggested_actions if suggested_actions is not None else []
    
    # Create new conversation log entry
    conversation_log = ConversationLog(
        user_id=user_id,
        session_id=session_id,
        user_message=user_message,
        detected_intent=detected_intent,
        entities=entities_json,
        bot_response=bot_response,
        suggested_actions=suggested_actions_json
    )
    
    # Add to database and commit
    db.add(conversation_log)
    db.commit()
    db.refresh(conversation_log)
    
    return conversation_log

def get_conversation_history(
    db: Session,
    user_id: Optional[str] = None,
    session_id: Optional[str] = None,
    limit: int = 10
) -> List[ConversationLog]:
    """
    Retrieve conversation history for a user or session.
    
    Args:
        db: Database session
        user_id: Filter by user ID (optional)
        session_id: Filter by session ID (optional)
        limit: Maximum number of records to return
        
    Returns:
        List of ConversationLog objects
    """
    query = db.query(ConversationLog)
    
    if user_id:
        query = query.filter(ConversationLog.user_id == user_id)
    
    if session_id:
        query = query.filter(ConversationLog.session_id == session_id)
    
    return query.order_by(ConversationLog.timestamp.desc()).limit(limit).all()

def get_conversation_by_id(db: Session, conversation_id: int) -> Optional[ConversationLog]:
    """
    Retrieve a specific conversation log by ID.
    
    Args:
        db: Database session
        conversation_id: ID of the conversation log to retrieve
        
    Returns:
        ConversationLog object if found, None otherwise
    """
    return db.query(ConversationLog).filter(ConversationLog.id == conversation_id).first()
